[project]
authors = [
  {name = "Nikitosio Noskovinni", email = "nik.noskov08@gmail.com"},
]
dependencies = [
  "sqlalchemy>=2.0.27",
]
description = "Type safety filtering and ordering for SQLAlchemy"
license = {text = "MIT"}

name = "sqla-filter"
readme = "README.md"
requires-python = ">=3.11"
version = "0.5.4"

[project.urls]
"Examples" = "https://github.com/barbarrista/sqla-filter/tree/main/examples"
"GitHub" = "https://github.com/barbarrista/sqla-filter"

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[tool.hatch.build.targets.sdist]
ignore-vcs = true
include = ["sqla_filter/*", "tests/*", "docs/*"]

[dependency-groups]
dev = [
  "commitizen>=3.18.0",
]
docs = [
  "mkdocs>=1.6.1",
  "mkdocs-material>=9.6.16",
  "termynal>=0.13.0",
]
lint = [
  "black>=24.2.0",
  "bump-pydantic>=0.8.0",
  "deptry>=0.12.0",
  "isort>=5.13.2",
  "mypy>=1.17.0",
  "radon>=6.0.1",
  "ruff>=0.3.2",
  "bump>=1.3.2",
]
tests = [
  "coverage>=7.4.0",
  "pytest>=7.4.4",
  "typeguard>=4.1.5",
]

[tool.pytest.ini_options]
pythonpath = "sqla_filter"

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[tool.deptry]
[tool.deptry.per_rule_ignores]
DEP002 = [
  "commitizen",
]

[tool.coverage.run]
branch = true
command_line = "-m pytest -v"
concurrency = ["greenlet", "thread"]
omit = []
source = ["sqla_filter"]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "raise NotImplementedError",
  "raise ValueError",
  "if TYPE_CHECKING:",
  "case _ as never:",
  "assert_never(never)",
]
fail_under = 100
precision = 2
show_missing = true
skip_covered = true
skip_empty = true

[tool.mypy]
exclude = ""
plugins = []

follow_imports = "silent"
ignore_missing_imports = true

check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_calls = true
disallow_untyped_defs = true
no_implicit_optional = true

warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_ignores = true

strict_equality = true
strict_optional = true

[tool.isort]
profile = "black"

[tool.ruff]
exclude = []
lint.fixable = [
  "F",
  "E",
  "W",
  "I",
  "COM",
  "UP",
  "RUF",
]
lint.ignore = [
  "E501", # Line Length
  "A003", # Class attribute ... is shadowing a python builtin
  "D", # pydocstyle
  "PD", # pandas-vet
  "INP",
  "TC001",
  "TC002",
  "TC003",
  "EXE",
  "COM812",
  "RUF001",
  "RUF002",
  "RUF003",
]
lint.select = ["ALL"]
src = ["sqla_filter", "tests"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
  "S101",
  "S311",
]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false

[tool.ruff.lint.mccabe]
max-complexity = 6

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = []

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
  "classmethod",
  "pydantic.validator",
  "pydantic.root_validator",
]
staticmethod-decorators = ["staticmethod"]

[tool.ruff.lint.flake8-self]
ignore-names = ["_t"] # SQLAlchemy result field, not actually private

[tool.commitizen]
changelog_start_rev = "0.2.0"
name = "cz_conventional_commits"
tag_format = "$version"
update_changelog_on_bump = true
version = "0.5.4"
version_files = [
  "sqla_filter/__init__.py",
  "pyproject.toml:version",
]
